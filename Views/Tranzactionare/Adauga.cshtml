@model CRYPTO_Burcea.DAL.Tranzactionare

@{
    ViewBag.Title = "Tranzactionare";
}

<h2>Tranzacționare nouă</h2>
<hr />
<h2>@ViewBag.tipT - @ViewBag.Moneda</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.DataTranzactionare, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DataTranzactionare, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.DataTranzactionare, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IdMonedaVanduta, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:red" })
        <div class="col-md-10">
            @if (ViewBag.tipT == "Cumparare")
            {
                @Html.DropDownListFor(model => model.IdMonedaVanduta, new SelectList(Model.ColectieMonedeV, "Id", "DenumireMoneda"), "Selectati moneda ", htmlAttributes: new { @class = "form-control", @id = "txtidMV" })
            }
            else if (ViewBag.tipT == "Vanzare")
            {
                @Html.DropDownListFor(model => model.IdMonedaVanduta, new SelectList(Model.ColectieMonedeV, "Id", "DenumireMoneda"), "Selectati moneda ", htmlAttributes: new { @class = "form-control", @*disabled = "disabled",*@ @id = "txtidMV" })
            }
            @Html.ValidationMessageFor(model => model.IdMonedaVanduta, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IdContinutPortofelVanzare, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:red" })
        <div class="col-md-10">
            @if (ViewBag.tipT == "Cumparare")
            {
                @Html.DropDownListFor(model => model.IdContinutPortofelVanzare, new SelectList(Model.ColectieContinutPortofeleV, "Id", "Portofel.DenumirePortofel"), "Selectati portofelul ", htmlAttributes: new { @class = "form-control", @id = "txtidV" })
            }
            else if (ViewBag.tipT == "Vanzare")
            {
                @Html.DropDownListFor(model => model.IdContinutPortofelVanzare, new SelectList(Model.ColectieContinutPortofeleV, "Id", "Portofel.DenumirePortofel"), "Selectati portofelul ", htmlAttributes: new { @class = "form-control", @*disabled = "disabled",*@ @id = "txtidV" })
            }
            @Html.ValidationMessageFor(model => model.IdContinutPortofelVanzare, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IdMonedaCumparata, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:green" })
        <div class="col-md-10">
            @if (ViewBag.tipT == "Cumparare")
            {
                @Html.DropDownListFor(model => model.IdMonedaCumparata, new SelectList(Model.ColectieMonedeC, "Id", "DenumireMoneda"), "Selectati moneda ", htmlAttributes: new { @class = "form-control", @*disabled = "disabled",*@ @id = "txtidMC" })
            }
            else if (ViewBag.tipT == "Vanzare")
            {
                @Html.DropDownListFor(model => model.IdMonedaCumparata, new SelectList(Model.ColectieMonedeC, "Id", "DenumireMoneda"), "Selectati moneda ", htmlAttributes: new { @class = "form-control", @id = "txtidMC" })
            }
            @Html.ValidationMessageFor(model => model.IdMonedaCumparata, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IdContinutPortofelCumparare, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:green" })
        <div class="col-md-10">
            @if (ViewBag.tipT == "Cumparare")
            {
                @Html.DropDownListFor(model => model.IdContinutPortofelCumparare, new SelectList(Model.ColectieContinutPortofeleC, "Id", "Portofel.DenumirePortofel"), "Selectati portofelul ", htmlAttributes: new { @class = "form-control", @*disabled = "disabled",*@ @id = "txtidC" })
            }
            else if (ViewBag.tipT == "Vanzare")
            {
                @Html.DropDownListFor(model => model.IdContinutPortofelCumparare, new SelectList(Model.ColectieContinutPortofeleC, "Id", "Portofel.DenumirePortofel"), "Selectati portofelul ", htmlAttributes: new { @class = "form-control", @id = "txtidC" })
            }
            @Html.ValidationMessageFor(model => model.IdContinutPortofelCumparare, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SumaVanduta, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:red" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SumaVanduta, new { htmlAttributes = new { @class = "form-control", @placeholder = "Suma vanduta", @id = "txtV" } })
            @Html.ValidationMessageFor(model => model.SumaVanduta, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SumaCumparata, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:green" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SumaCumparata, new { htmlAttributes = new { @class = "form-control", @placeholder = "Suma cumparata", @id = "txtC" } })
            @Html.ValidationMessageFor(model => model.SumaCumparata, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ComisionEuro, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ComisionEuro, new { htmlAttributes = new { @class = "form-control", @placeholder = "Valoare comision", @id = "txtCom" } })
            @Html.ValidationMessageFor(model => model.ComisionEuro, "", new { @class = "text-danger" })
        </div>
    </div>
    <br />

    <div>
        <b style="color:red">Foarte important:</b>
        <p style="color:red">Puteti introduce o suma in campul "Suma vanduta", si automat, cand veti da click in afara campului, campurile "Suma cumparata" si "Comision euro" se vor completa cu valorile corespunzatoare</p>
        <p style="color:red">De asemenea, puteti introduce o suma in campul "Suma cumparata", si automat, cand veti da click in afara campului, campurile "Suma vanduta" si "Comision euro" se vor completa cu valorile corespunzatoare</p>
    </div>
    <br />

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Tranzacționează" class="btn btn-success" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Înapoi", "Detalii", "Portofel", new { idPortofel = ViewBag.idP }, new { @class = "btn btn-primary" })
</div>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=" crossorigin="anonymous"></script>


@*  SCRIPT PENTRU APELAREA AJAX - METODA DIN CONTROLLER - CALCULARE SUMA CUMPARATA  *@
<script type="text/javascript">
    $(function AutoCompleteC() {
        $("#txtV").on('focusout', function () {
            if ($("#txtV").val() != "" && $("#txtidMV").val() != null && $("#txtidMV").val() != "0" && $("#txtidMV").val() != "" && $("#txtidMC").val() != null && $("#txtidMC").val() != "0" && $("#txtidMC").val() != "") {
                $.ajax({
                    type: "GET",
                    url: "/Tranzactionare/VerificareSume",
                    data: { 'idCP': $("#txtidV").val() }
                    ,
                    contentType: "application/json",
                    dataType: "json",
                    success: function (result) {
                        var suma = parseFloat(result);
                        var sumaV = parseFloat($("#txtV").val());
                        if (sumaV > suma) {
                            $("#txtV").val("");
                            $("#txtC").val("");
                            $("#txtCom").val("");
                            alert("Sold indisponibil");
                        }
                        else {
                            $.ajax({
                                type: "GET",
                                url: "/Tranzactionare/AutoCompletareSumaC",
                                data: { 'sumaV': $("#txtV").val(), 'idMC': $("#txtidMC").val(), 'idMV': $("#txtidMV").val() }
                                ,
                                contentType: "application/json",
                                dataType: "json",
                                success: function (result) {
                                    $('#txtC').empty();
                                    $('#txtC').val(result);
                                }
                            });

                            $.ajax({
                                type: "GET",
                                url: "/Tranzactionare/AutoCompletareComision",
                                data: { 'suma': $("#txtV").val(), 'idM': $("#txtidMV").val() }
                                ,
                                contentType: "application/json",
                                dataType: "json",
                                success: function (result) {
                                    $('#txtCom').empty();
                                    $('#txtCom').val(result);
                                }
                            });
                        }
                    }
                });


            }
            else {
                alert("Alegeti moneda sau / si portofelul pentru autocompletarea campurilor")
            }
        });
    })
</script>

@*  SCRIPT PENTRU APELAREA AJAX - METODA DIN CONTROLLER - CALCULARE SUMA VANDUTA  *@
<script type="text/javascript">
    $(function AutoCompleteV() {
        $("#txtC").on('focusout', function () {
            if ($("#txtC").val() != "" && $("#txtidMV").val() != null && $("#txtidMV").val() != "0" && $("#txtidMV").val() != "" && $("#txtidMC").val() != null && $("#txtidMC").val() != "0" && $("#txtidMC").val() != "") {
                $.ajax({
                    type: "GET",
                    url: "/Tranzactionare/AutoCompletareSumaV",
                    data: { 'sumaC': $("#txtC").val(), 'idMC': $("#txtidMC").val(), 'idMV': $("#txtidMV").val() }
                    ,
                    contentType: "application/json",
                    dataType: "json",
                    success: function (result) {
                        $('#txtV').empty();
                        $('#txtV').val(result);
                    }
                });

                if ($("#txtV").val() != "") {
                    $.ajax({
                        type: "GET",
                        url: "/Tranzactionare/AutoCompletareComision",
                        data: { 'suma': $("#txtV").val(), 'idM': $("#txtidMV").val() }
                        ,
                        contentType: "application/json",
                        dataType: "json",
                        success: function (result) {
                            $('#txtCom').empty();
                            $('#txtCom').val(result);
                        }
                    });
                }

                $.ajax({
                    type: "GET",
                    url: "/Tranzactionare/VerificareSume",
                    data: { 'idCP': $("#txtidV").val() }
                    ,
                    contentType: "application/json",
                    dataType: "json",
                    success: function (result) {
                        var suma = parseFloat(result);
                        var sumaV = parseFloat($("#txtV").val());
                        if (sumaV > suma) {
                            $("#txtV").val("");
                            $("#txtC").val("");
                            $("#txtCom").val("");
                            alert("Sold indisponibil");
                        }
                    }
                });
            }
            else {
                alert("Alegeti moneda sau / si portofelul pentru autocompletarea campurilor")
            }
        });
    })
</script>


@*  SCRIPT PENTRU APELAREA AJAX - METODA DIN CONTROLLER - afisare portofele -- VANZARE SELECT *@

<script type="text/javascript">
            $('#txtidMV').change(function () {
                var selectedMoneda = $("#txtidMV").val();
                var portofelSelect = $('#txtidV');
                portofelSelect.empty();
                $.getJSON('@Url.Action("ListaPortofeleChange", "Tranzactionare")', { idM: selectedMoneda, idMa: $("#txtidMC").val() }, function (portofele) {
                        if (portofele != null && !jQuery.isEmptyObject(portofele))
                        {
                            portofelSelect.append($('<option/>', {
                                value: null,
                                text: "Selectati portofelul"
                            }));
                            $.each(portofele, function (index, portofel) {
                                portofelSelect.append($('<option/>', {
                                    value: portofel.Value,
                                    text: portofel.Text
                                }));
                            });
                            $('#txtC').empty();
                            $('#txtV').empty();
                            $('#txtCom').empty();
                        };
                });
            });
</script>

@*  SCRIPT PENTRU APELAREA AJAX - METODA DIN CONTROLLER - afisare portofele -- CUMPARARE SELECT *@

<script type="text/javascript">
            $('#txtidMC').change(function () {
                var selectedMoneda = $("#txtidMC").val();
                var portofelSelect = $('#txtidC');
                portofelSelect.empty();
                $.getJSON('@Url.Action("ListaPortofeleChange", "Tranzactionare")', { idM: selectedMoneda, idMa: $("#txtidMV").val() }, function (portofele) {
                        if (portofele != null && !jQuery.isEmptyObject(portofele))
                        {
                            portofelSelect.append($('<option/>', {
                                value: null,
                                text: "Selectati portofelul"
                            }));
                            $.each(portofele, function (index, portofel) {
                                portofelSelect.append($('<option/>', {
                                    value: portofel.Value,
                                    text: portofel.Text
                                }));
                            });
                            $('#txtC').empty();
                            $('#txtV').empty();
                            $('#txtCom').empty();
                        };
                });
            });
</script>

